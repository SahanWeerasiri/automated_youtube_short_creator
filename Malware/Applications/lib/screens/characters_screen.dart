import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:temple_run_2d/models/character.dart';
import 'package:temple_run_2d/providers/game_provider.dart';
import 'package:temple_run_2d/providers/player_provider.dart';

class CharactersScreen extends StatelessWidget {
  const CharactersScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Characters'),
        backgroundColor: Colors.purple,
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.purple, Colors.deepPurple],
          ),
        ),
        child: Consumer2<GameProvider, PlayerProvider>(
          builder: (context, gameProvider, playerProvider, child) {
            final characters = gameProvider.availableCharacters;
            final player = playerProvider.player;
            
            return Column(
              children: [
                // Player stats
                Container(
                  margin: const EdgeInsets.all(16),
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.black26,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: [
                      _buildStatItem(
                        Icons.monetization_on,
                        '${player.coins}',
                        Colors.amber,
                      ),
                      _buildStatItem(
                        Icons.diamond,
                        '${player.gems}',
                        Colors.lightBlueAccent,
                      ),
                    ],
                  ),
                ),
                
                // Characters grid
                Expanded(
                  child: GridView.builder(
                    padding: const EdgeInsets.all(16),
                    gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2,
                      childAspectRatio: 0.75,
                      crossAxisSpacing: 16,
                      mainAxisSpacing: 16,
                    ),
                    itemCount: characters.length,
                    itemBuilder: (context, index) {
                      final character = characters[index];
                      final isUnlocked = player.unlockedCharacterIds.contains(character.id);
                      final isSelected = player.selectedCharacterId == character.id;
                      
                      return _buildCharacterCard(
                        context,
                        character,
                        isUnlocked,
                        isSelected,
                        playerProvider,
                      );
                    },
                  ),
                ),
              ],
            );
          },
        ),
      ),
    );
  }

  Widget _buildStatItem(IconData icon, String value, Color color) {
    return Row(
      children: [
        Icon(icon, color: color),
        const SizedBox(width: 8),
        Text(
          value,
          style: const TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
            fontSize: 18,
          ),
        ),
      ],
    );
  }

  Widget _buildCharacterCard(
    BuildContext context,
    GameCharacter character,
    bool isUnlocked,
    bool isSelected,
    PlayerProvider playerProvider,
  ) {
    return Container(
      decoration: BoxDecoration(
        color: isSelected
            ? Colors.amber.withOpacity(0.3)
            : Colors.white.withOpacity(0.1),
        borderRadius: BorderRadius.circular(16),
        border: isSelected
            ? Border.all(color: Colors.amber, width: 2)
            : null,
      ),
      child: Column(
        children: [
          // Character image
          Expanded(
            child: Stack(
              children: [
                Center(
                  child: Opacity(
                    opacity: isUnlocked ? 1.0 : 0.5,
                    child: Image.asset(
                      character.imagePath,
                      fit: BoxFit.contain,
                      errorBuilder: (context, error, stackTrace) {
                        // Fallback for missing assets in this example
                        return Container(
                          color: Colors.grey[800],
                          child: const Icon(
                            Icons.person,
                            size: 80,
                            color: Colors.white54,
                          ),
                        );
                      },
                    ),
                  ),
                ),
                if (!isUnlocked)
                  Center(
                    child: Icon(
                      Icons.lock,
                      size: 40,
                      color: Colors.white.withOpacity(0.7),
                    ),
                  ),
                if (isSelected)
                  Positioned(
                    top: 8,
                    right: 8,
                    child: Container(
                      padding: const EdgeInsets.all(4),
                      decoration: const BoxDecoration(
                        color: Colors.amber,
                        shape: BoxShape.circle,
                      ),
                      child: const Icon(
                        Icons.check,
                        color: Colors.white,
                        size: 16,
                      ),
                    ),
                  ),
              ],
            ),
          ),
          
          // Character info
          Padding(
            padding: const EdgeInsets.all(12),
            child: Column(
              children: [
                Text(
                  character.name,
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  character.description,
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: Colors.white.withOpacity(0.7),
                    fontSize: 12,
                  ),
                ),
                const SizedBox(height: 8),
                if (character.specialAbility != null)
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 8,
                      vertical: 2,
                    ),
                    decoration: BoxDecoration(
                      color: Colors.purple[300],
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      character.specialAbility!,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                const SizedBox(height: 8),
                if (isUnlocked)
                  ElevatedButton(
                    onPressed: isSelected
                        ? null
                        : () {
                            playerProvider.selectCharacter(character.id);
                          },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.amber,
                      foregroundColor: Colors.white,
                      minimumSize: const Size(double.infinity, 36),
                    ),
                    child: Text(isSelected ? 'SELECTED' : 'SELECT'),
                  )
                else
                  ElevatedButton.icon(
                    onPressed: () async {
                      final success = await playerProvider.unlockCharacter(character);
                      if (!success && context.mounted) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text('Not enough coins to unlock this character!'),
                            backgroundColor: Colors.red,
                          ),
                        );
                      }
                    },
                    icon: const Icon(Icons.monetization_on),
                    label: Text('${character.unlockCost}'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                      minimumSize: const Size(double.infinity, 36),
                    ),
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
