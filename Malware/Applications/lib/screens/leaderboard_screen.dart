import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:temple_run_2d/providers/player_provider.dart';

class LeaderboardScreen extends StatelessWidget {
  const LeaderboardScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Leaderboard'),
        backgroundColor: Colors.blue,
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.blue, Colors.indigo],
          ),
        ),
        child: Column(
          children: [
            // Top players podium
            const SizedBox(height: 20),
            const Text(
              'TOP RUNNERS',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
            const SizedBox(height: 20),
            StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance
                  .collection('leaderboard')
                  .orderBy('score', descending: true)
                  .limit(3)
                  .snapshots(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }

                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                  return const Center(
                    child: Text(
                      'No scores yet. Be the first!',
                      style: TextStyle(color: Colors.white),
                    ),
                  );
                }

                final topPlayers = snapshot.data!.docs;

                return SizedBox(
                  height: 180,
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: [
                      if (topPlayers.length > 1)
                        _buildPodiumItem(
                          context,
                          topPlayers[1].data() as Map<String, dynamic>,
                          60,
                          Colors.grey[300]!,
                          '2',
                        ),
                      if (topPlayers.isNotEmpty)
                        _buildPodiumItem(
                          context,
                          topPlayers[0].data() as Map<String, dynamic>,
                          70,
                          Colors.amber,
                          '1',
                        ),
                      if (topPlayers.length > 2)
                        _buildPodiumItem(
                          context,
                          topPlayers[2].data() as Map<String, dynamic>,
                          50,
                          Colors.brown[300]!,
                          '3',
                        ),
                    ],
                  ),
                );
              },
            ),
            const SizedBox(height: 20),
            // Full leaderboard
            Expanded(
              child: Container(
                margin: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(16),
                ),
                child: StreamBuilder<QuerySnapshot>(
                  stream: FirebaseFirestore.instance
                      .collection('leaderboard')
                      .orderBy('score', descending: true)
                      .limit(50)
                      .snapshots(),
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.waiting) {
                      return const Center(child: CircularProgressIndicator());
                    }

                    if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                      return const Center(
                        child: Text(
                          'No scores yet. Be the first!',
                          style: TextStyle(color: Colors.white),
                        ),
                      );
                    }

                    final players = snapshot.data!.docs;
                    final currentPlayerId =
                        Provider.of<PlayerProvider>(context).player.id;

                    return ListView.builder(
                      itemCount: players.length,
                      itemBuilder: (context, index) {
                        final player =
                            players[index].data() as Map<String, dynamic>;
                        final isCurrentPlayer =
                            player['playerId'] == currentPlayerId;

                        return Container(
                          margin: const EdgeInsets.symmetric(
                            horizontal: 16,
                            vertical: 4,
                          ),
                          decoration: BoxDecoration(
                            color: isCurrentPlayer
                                ? Colors.amber.withOpacity(0.2)
                                : Colors.white.withOpacity(0.05),
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: ListTile(
                            leading: CircleAvatar(
                              backgroundColor: _getRankColor(index),
                              child: Text(
                                '${index + 1}',
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                            title: Text(
                              player['playerName'] ?? 'Unknown Player',
                              style: TextStyle(
                                color: isCurrentPlayer
                                    ? Colors.amber
                                    : Colors.white,
                                fontWeight: isCurrentPlayer
                                    ? FontWeight.bold
                                    : FontWeight.normal,
                              ),
                            ),
                            trailing: Text(
                              '${player['score']}',
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        );
                      },
                    );
                  },
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPodiumItem(
    BuildContext context,
    Map<String, dynamic> player,
    double height,
    Color color,
    String rank,
  ) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          Text(
            player['playerName'] ?? 'Unknown',
            style: const TextStyle(
              color: Colors.white,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          CircleAvatar(
            radius: 24,
            backgroundColor: color,
            child: Text(
              rank,
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          const SizedBox(height: 8),
          Text(
            '${player['score']}',
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          Container(
            width: 60,
            height: height,
            decoration: BoxDecoration(
              color: color.withOpacity(0.7),
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(8),
                topRight: Radius.circular(8),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Color _getRankColor(int index) {
    if (index == 0) return Colors.amber;
    if (index == 1) return Colors.grey[400]!;
    if (index == 2) return Colors.brown[300]!;
    return Colors.blue[300]!;
  }
}
