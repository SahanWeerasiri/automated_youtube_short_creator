import 'package:flame/game.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:temple_run_2d/game/temple_run_game.dart';
import 'package:temple_run_2d/providers/game_provider.dart';
import 'package:temple_run_2d/providers/player_provider.dart';
import 'package:temple_run_2d/widgets/game_hud.dart';
import 'package:temple_run_2d/widgets/game_over_overlay.dart';
import 'package:temple_run_2d/widgets/pause_menu.dart';

class GameScreen extends StatefulWidget {
  const GameScreen({super.key});

  @override
  State<GameScreen> createState() => _GameScreenState();
}

class _GameScreenState extends State<GameScreen> {
  late TempleRunGame _game;
  bool _isPaused = false;
  bool _isGameOver = false;

  @override
  void initState() {
    super.initState();
    GameProvider gameProvider =
        Provider.of<GameProvider>(context, listen: false);
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Provider.of<GameProvider>(context, listen: false).startGame();
    });
    final playerProvider = Provider.of<PlayerProvider>(context, listen: false);

    // Get the selected character
    final selectedCharacterId = playerProvider.player.selectedCharacterId;
    final selectedCharacter =
        gameProvider.getCharacterById(selectedCharacterId);

    // Initialize the game
    _game = TempleRunGame(
      onGameOver: _handleGameOver,
      onCollectCoin: () {
        gameProvider.collectCoin();
      },
      onCollectGem: () {
        gameProvider.collectGem();
      },
      onAvoidObstacle: () {
        gameProvider.avoidObstacle();
      },
      character: selectedCharacter,
    );

    // Remove this line:
    // gameProvider.startGame();
  }

  void _handleGameOver() {
    setState(() {
      _isGameOver = true;
    });

    final gameProvider = Provider.of<GameProvider>(context, listen: false);
    final playerProvider = Provider.of<PlayerProvider>(context, listen: false);

    // Update player stats
    playerProvider.updateHighScore(gameProvider.currentScore);
    playerProvider.addCoins(gameProvider.coinsCollected);
    playerProvider.addGems(gameProvider.gemsCollected);

    // End the game
    gameProvider.endGame();
  }

  void _togglePause() {
    setState(() {
      _isPaused = !_isPaused;
    });

    if (_isPaused) {
      _game.pauseEngine();
    } else {
      _game.resumeEngine();
    }
  }

  void _restartGame() {
    setState(() {
      _isGameOver = false;
    });

    final gameProvider = Provider.of<GameProvider>(context, listen: false);
    gameProvider.startGame();

    // Reset and restart the game
    _game.reset();
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        if (!_isPaused && !_isGameOver) {
          _togglePause();
          return false;
        }
        return true;
      },
      child: Scaffold(
        body: Stack(
          children: [
            // Game canvas
            GameWidget(game: _game),

            // HUD overlay
            if (!_isPaused && !_isGameOver) const GameHUD(),

            // Pause button
            if (!_isPaused && !_isGameOver)
              Positioned(
                top: 40,
                right: 20,
                child: IconButton(
                  icon: const Icon(Icons.pause, color: Colors.white),
                  onPressed: _togglePause,
                ),
              ),

            // Pause menu overlay
            if (_isPaused && !_isGameOver)
              PauseMenu(
                onResume: _togglePause,
                onRestart: _restartGame,
                onExit: () {
                  Navigator.pop(context);
                },
              ),

            // Game over overlay
            if (_isGameOver)
              GameOverOverlay(
                onRestart: _restartGame,
                onExit: () {
                  Navigator.pop(context);
                },
              ),
          ],
        ),
      ),
    );
  }
}
