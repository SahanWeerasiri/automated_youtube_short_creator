import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:uuid/uuid.dart';
import 'package:temple_run_2d/models/player.dart';
import 'package:temple_run_2d/models/character.dart';

class PlayerProvider with ChangeNotifier {
  Player _player = Player(
    id: '',
    name: 'Player',
    coins: 0,
    gems: 0,
    highScore: 0,
    selectedCharacterId: 'default',
    unlockedCharacterIds: ['default'],
  );

  Player get player => _player;
  
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  bool _isInitialized = false;

  Future<void> initialize() async {
    if (_isInitialized) return;
    
    final prefs = await SharedPreferences.getInstance();
    String? playerId = prefs.getString('player_id');
    
    if (playerId == null) {
      // New player, create a new ID and save it
      playerId = const Uuid().v4();
      await prefs.setString('player_id', playerId);
      
      // Create new player in Firestore
      _player = Player(
        id: playerId,
        name: 'Player${playerId.substring(0, 4)}',
        coins: 100, // Starting coins
        gems: 10,   // Starting gems
        highScore: 0,
        selectedCharacterId: 'default',
        unlockedCharacterIds: ['default'],
      );
      
      await _firestore.collection('players').doc(playerId).set(_player.toMap());
    } else {
      // Existing player, load data from Firestore
      final doc = await _firestore.collection('players').doc(playerId).get();
      
      if (doc.exists) {
        _player = Player.fromMap(doc.data()!);
      } else {
        // Player ID exists locally but not in Firestore (edge case)
        _player = Player(
          id: playerId,
          name: 'Player${playerId.substring(0, 4)}',
          coins: 100,
          gems: 10,
          highScore: 0,
          selectedCharacterId: 'default',
          unlockedCharacterIds: ['default'],
        );
        
        await _firestore.collection('players').doc(playerId).set(_player.toMap());
      }
    }
    
    _isInitialized = true;
    notifyListeners();
  }

  Future<void> updateName(String name) async {
    _player = _player.copyWith(name: name);
    await _firestore.collection('players').doc(_player.id).update({'name': name});
    notifyListeners();
  }

  Future<void> addCoins(int amount) async {
    final newCoins = _player.coins + amount;
    _player = _player.copyWith(coins: newCoins);
    await _firestore.collection('players').doc(_player.id).update({'coins': newCoins});
    notifyListeners();
  }

  Future<void> addGems(int amount) async {
    final newGems = _player.gems + amount;
    _player = _player.copyWith(gems: newGems);
    await _firestore.collection('players').doc(_player.id).update({'gems': newGems});
    notifyListeners();
  }

  Future<void> updateHighScore(int score) async {
    if (score > _player.highScore) {
      _player = _player.copyWith(highScore: score);
      await _firestore.collection('players').doc(_player.id).update({'highScore': score});
      
      // Also update the leaderboard
      await _firestore.collection('leaderboard').doc(_player.id).set({
        'playerId': _player.id,
        'playerName': _player.name,
        'score': score,
        'timestamp': FieldValue.serverTimestamp(),
      });
      
      notifyListeners();
    }
  }

  Future<void> selectCharacter(String characterId) async {
    if (_player.unlockedCharacterIds.contains(characterId)) {
      _player = _player.copyWith(selectedCharacterId: characterId);
      await _firestore.collection('players').doc(_player.id).update({
        'selectedCharacterId': characterId
      });
      notifyListeners();
    }
  }

  Future<bool> unlockCharacter(GameCharacter character) async {
    // Check if player has enough currency to unlock
    if (character.unlockCost <= _player.coins) {
      final newCoins = _player.coins - character.unlockCost;
      final newUnlockedIds = List<String>.from(_player.unlockedCharacterIds)
        ..add(character.id);
      
      _player = _player.copyWith(
        coins: newCoins,
        unlockedCharacterIds: newUnlockedIds,
      );
      
      await _firestore.collection('players').doc(_player.id).update({
        'coins': newCoins,
        'unlockedCharacterIds': newUnlockedIds,
      });
      
      notifyListeners();
      return true;
    }
    return false;
  }
}
