import 'package:flutter/material.dart';
import 'package:temple_run_2d/models/character.dart';

class GameProvider with ChangeNotifier {
  int _currentScore = 0;
  bool _isGameActive = false;
  double _gameSpeed = 1.0;
  int _obstaclesAvoided = 0;
  int _coinsCollected = 0;
  int _gemsCollected = 0;
  
  int get currentScore => _currentScore;
  bool get isGameActive => _isGameActive;
  double get gameSpeed => _gameSpeed;
  int get obstaclesAvoided => _obstaclesAvoided;
  int get coinsCollected => _coinsCollected;
  int get gemsCollected => _gemsCollected;
  
  final List<GameCharacter> _availableCharacters = [
    GameCharacter(
      id: 'default',
      name: 'Explorer',
      description: 'The default character',
      unlockCost: 0,
      speedMultiplier: 1.0,
      coinMultiplier: 1.0,
      imagePath: 'assets/images/characters/explorer.png',
    ),
    GameCharacter(
      id: 'ninja',
      name: 'Ninja',
      description: 'Faster movement speed',
      unlockCost: 1000,
      speedMultiplier: 1.2,
      coinMultiplier: 1.0,
      imagePath: 'assets/images/characters/ninja.png',
    ),
    GameCharacter(
      id: 'treasure_hunter',
      name: 'Treasure Hunter',
      description: 'Collects more coins',
      unlockCost: 2000,
      speedMultiplier: 1.0,
      coinMultiplier: 1.5,
      imagePath: 'assets/images/characters/treasure_hunter.png',
    ),
    GameCharacter(
      id: 'mystic',
      name: 'Mystic',
      description: 'Attracts gems',
      unlockCost: 3000,
      speedMultiplier: 1.0,
      coinMultiplier: 1.0,
      imagePath: 'assets/images/characters/mystic.png',
      specialAbility: 'Gem Magnet',
    ),
  ];
  
  List<GameCharacter> get availableCharacters => _availableCharacters;
  
  GameCharacter getCharacterById(String id) {
    return _availableCharacters.firstWhere(
      (character) => character.id == id,
      orElse: () => _availableCharacters.first,
    );
  }
  
  void startGame() {
    _currentScore = 0;
    _gameSpeed = 1.0;
    _obstaclesAvoided = 0;
    _coinsCollected = 0;
    _gemsCollected = 0;
    _isGameActive = true;
    notifyListeners();
  }
  
  void endGame() {
    _isGameActive = false;
    notifyListeners();
  }
  
  void increaseScore(int points) {
    _currentScore += points;
    
    // Increase game speed as score increases
    if (_currentScore > 0 && _currentScore % 500 == 0) {
      _gameSpeed = _gameSpeed * 1.1;
      if (_gameSpeed > 3.0) {
        _gameSpeed = 3.0; // Cap the speed
      }
    }
    
    notifyListeners();
  }
  
  void collectCoin() {
    _coinsCollected++;
    increaseScore(10);
  }
  
  void collectGem() {
    _gemsCollected++;
    increaseScore(50);
  }
  
  void avoidObstacle() {
    _obstaclesAvoided++;
    increaseScore(5);
  }
}
