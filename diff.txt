diff --git a/.vscode/tasks.json b/.vscode/tasks.json
new file mode 100644
index 0000000..8bccaff
--- /dev/null
+++ b/.vscode/tasks.json
@@ -0,0 +1,34 @@
+{
+    // See https://go.microsoft.com/fwlink/?LinkId=733558
+    // for the documentation about the tasks.json format
+    "version": "2.0.0",
+    "tasks": [
+        {
+            "label": "Automated Git",
+            "type": "shell",
+            "command": "python",
+            "args": [
+                "C:/Users/Sahan/Dark/personal/Automation/vscode_save_automation/git_commit.py",
+            ],
+            "group": {
+                "kind": "build",
+                "isDefault": true
+            },
+            "presentation": {
+                "echo": true,
+                "reveal": "always",
+                "focus": true,
+                "panel": "shared",
+                "showReuseMessage": true,
+                "clear": false
+            },
+            "runOptions": {
+                "runOn": "folderOpen"
+            },
+            "problemMatcher": [
+                "$tsc"
+            ],
+            "detail": "Automated Git commit and push"
+        }
+    ]
+}
\ No newline at end of file
diff --git a/Automation/vscode_save_automation/.gitignore b/Automation/vscode_save_automation/.gitignore
new file mode 100644
index 0000000..2eea525
--- /dev/null
+++ b/Automation/vscode_save_automation/.gitignore
@@ -0,0 +1 @@
+.env
\ No newline at end of file
diff --git a/Automation/vscode_save_automation/git_commit.py b/Automation/vscode_save_automation/git_commit.py
new file mode 100644
index 0000000..e200a81
--- /dev/null
+++ b/Automation/vscode_save_automation/git_commit.py
@@ -0,0 +1,67 @@
+import os
+import subprocess
+import sys
+import dotenv
+import requests
+
+dotenv.load_dotenv()
+API_KEY = os.getenv("GEMINI_API_KEY")
+
+def git_commit():
+    # Check if the current directory is a git repository
+    try:
+        subprocess.run(["git", "rev-parse", "--is-inside-work-tree"], check=True, stdout=subprocess.PIPE)
+    except subprocess.CalledProcessError:
+        print("This directory is not a git repository.")
+        sys.exit(1)
+
+    # Add all changes to the staging area
+    subprocess.run(["git", "add", "."])
+
+    # Check if there are any changes to commit
+    result = subprocess.run(["git", "diff", "--cached", "--quiet"], check=False)
+    if result.returncode == 0:
+        print("No changes to commit.")
+        sys.exit(0)
+    
+    # Create a diff file with the changes
+    with open("diff.txt", "w") as diff_file:
+        subprocess.run(["git", "diff", "--cached"], stdout=diff_file)
+
+    with open("diff.txt", "r") as diff_file:
+        diff_content = diff_file.read()
+        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={API_KEY}"
+        headers = {"Content-Type": "application/json"}
+        payload = {
+            "contents": [
+                {
+                    "parts": [{"text": diff_content+ "\n\nPlease provide a commit message for the above changes."}],
+                }
+            ]
+        }
+
+        response = requests.post(url, headers=headers, json=payload)
+        if response.status_code != 200:
+            print(f"Error: {response.status_code}, {response.text}")
+            sys.exit(1)
+
+        response_content = response.json()
+
+        # Extract the commit message from the response
+        print("Response content:", response_content)
+        commit_message = response_content["contents"][0]["parts"][0]["text"]
+
+        # Commit the changes with a message
+        subprocess.run(["git", "commit", "-m", commit_message])
+
+if __name__ == "__main__":
+    directory = sys.argv[1] if len(sys.argv) > 1 else os.getcwd()
+    pwd = os.getcwd()
+    os.chdir(directory)
+    git_commit()
+    # Clean up
+    os.remove("diff.txt")
+    os.remove("response.json")
+    os.chdir(pwd)
+    print("Commit successful.")
+    sys.exit(0)
\ No newline at end of file
diff --git a/Automation/vscode_save_automation/method.md b/Automation/vscode_save_automation/method.md
new file mode 100644
index 0000000..b71cfdc
--- /dev/null
+++ b/Automation/vscode_save_automation/method.md
@@ -0,0 +1,61 @@
+### **Method 1: Using VSCode Tasks + Keyboard Shortcut**
+1. **Create a Task in VSCode**:
+   - Open the Command Palette (`Ctrl+Shift+P` or `Cmd+Shift+P` on macOS).
+   - Type `Tasks: Configure Task` and select it.
+   - Choose `Create tasks.json file from template` â†’ `Others`.
+   - Replace the content with:
+     ```json
+     {
+       "version": "2.0.0",
+       "tasks": [
+         {
+           "label": "Run Batch File",
+           "type": "shell",
+           "command": "${workspaceFolder}/yourfile.bat", // Update path to your .bat file
+           "problemMatcher": []
+         }
+       ]
+     }
+     ```
+   - Save the file (`tasks.json`).
+
+2. **Assign a Keyboard Shortcut**:
+   - Open the Command Palette again (`Ctrl+Shift+P`).
+   - Type `Preferences: Open Keyboard Shortcuts (JSON)`.
+   - Add this entry:
+     ```json
+     {
+       "key": "ctrl+alt+b", // Choose your preferred hotkey
+       "command": "workbench.action.tasks.runTask",
+       "args": "Run Batch File"
+     }
+     ```
+   - Save the file.
+
+Now, pressing `Ctrl+Alt+B` (or your chosen hotkey) will execute the `.bat` file.
+
+---
+
+### **Method 2: Using a VSCode Extension (Advanced)**
+If you need more control (like running in a terminal), you can use the **Terminal Commands** extension:
+1. Install the [Terminal Commands](https://marketplace.visualstudio.com/items?itemName=usernamehw.terminal-commands) extension.
+2. Configure a command in `settings.json`:
+   ```json
+   "terminalCommands.commands": {
+     "Run Batch File": "yourfile.bat"
+   }
+   ```
+3. Assign a hotkey in `keybindings.json`:
+   ```json
+   {
+     "key": "ctrl+alt+b",
+     "command": "terminalCommands.runCommand",
+     "args": "Run Batch File"
+   }
+   ```
+
+---
+
+### **Notes**
+- Ensure the `.bat` file is in your workspace or provide the full path (`C:/path/to/yourfile.bat`).
+- If the script requires admin rights, you may need additional setup (like running VSCode as admin).
diff --git a/diff.txt b/diff.txt
new file mode 100644
index 0000000..9a2559c
--- /dev/null
+++ b/diff.txt
@@ -0,0 +1,189 @@
+diff --git a/.vscode/tasks.json b/.vscode/tasks.json
+new file mode 100644
+index 0000000..8bccaff
+--- /dev/null
++++ b/.vscode/tasks.json
+@@ -0,0 +1,34 @@
++{
++    // See https://go.microsoft.com/fwlink/?LinkId=733558
++    // for the documentation about the tasks.json format
++    "version": "2.0.0",
++    "tasks": [
++        {
++            "label": "Automated Git",
++            "type": "shell",
++            "command": "python",
++            "args": [
++                "C:/Users/Sahan/Dark/personal/Automation/vscode_save_automation/git_commit.py",
++            ],
++            "group": {
++                "kind": "build",
++                "isDefault": true
++            },
++            "presentation": {
++                "echo": true,
++                "reveal": "always",
++                "focus": true,
++                "panel": "shared",
++                "showReuseMessage": true,
++                "clear": false
++            },
++            "runOptions": {
++                "runOn": "folderOpen"
++            },
++            "problemMatcher": [
++                "$tsc"
++            ],
++            "detail": "Automated Git commit and push"
++        }
++    ]
++}
+\ No newline at end of file
+diff --git a/Automation/vscode_save_automation/.gitignore b/Automation/vscode_save_automation/.gitignore
+new file mode 100644
+index 0000000..2eea525
+--- /dev/null
++++ b/Automation/vscode_save_automation/.gitignore
+@@ -0,0 +1 @@
++.env
+\ No newline at end of file
+diff --git a/Automation/vscode_save_automation/git_commit.py b/Automation/vscode_save_automation/git_commit.py
+new file mode 100644
+index 0000000..7653b42
+--- /dev/null
++++ b/Automation/vscode_save_automation/git_commit.py
+@@ -0,0 +1,66 @@
++import os
++import subprocess
++import sys
++import dotenv
++import requests
++
++dotenv.load_dotenv()
++API_KEY = os.getenv("GEMINI_API_KEY")
++
++def git_commit():
++    # Check if the current directory is a git repository
++    try:
++        subprocess.run(["git", "rev-parse", "--is-inside-work-tree"], check=True, stdout=subprocess.PIPE)
++    except subprocess.CalledProcessError:
++        print("This directory is not a git repository.")
++        sys.exit(1)
++
++    # Add all changes to the staging area
++    subprocess.run(["git", "add", "."])
++
++    # Check if there are any changes to commit
++    result = subprocess.run(["git", "diff", "--cached", "--quiet"], check=False)
++    if result.returncode == 0:
++        print("No changes to commit.")
++        sys.exit(0)
++    
++    # Create a diff file with the changes
++    with open("diff.txt", "w") as diff_file:
++        subprocess.run(["git", "diff", "--cached"], stdout=diff_file)
++
++    with open("diff.txt", "r") as diff_file:
++        diff_content = diff_file.read()
++        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={API_KEY}"
++        headers = {"Content-Type": "application/json"}
++        payload = {
++            "contents": [
++                {
++                    "parts": [{"text": diff_content+ "\n\nPlease provide a commit message for the above changes."}],
++                }
++            ]
++        }
++
++        response = requests.post(url, headers=headers, json=payload)
++        if response.status_code != 200:
++            print(f"Error: {response.status_code}, {response.text}")
++            sys.exit(1)
++
++        response_content = response.json()
++
++        # Extract the commit message from the response
++        commit_message = response_content["contents"][0]["parts"][0]["text"]
++
++        # Commit the changes with a message
++        subprocess.run(["git", "commit", "-m", commit_message])
++
++if __name__ == "__main__":
++    directory = sys.argv[1] if len(sys.argv) > 1 else os.getcwd()
++    pwd = os.getcwd()
++    os.chdir(directory)
++    git_commit()
++    # Clean up
++    os.remove("diff.txt")
++    os.remove("response.json")
++    os.chdir(pwd)
++    print("Commit successful.")
++    sys.exit(0)
+\ No newline at end of file
+diff --git a/Automation/vscode_save_automation/method.md b/Automation/vscode_save_automation/method.md
+new file mode 100644
+index 0000000..b71cfdc
+--- /dev/null
++++ b/Automation/vscode_save_automation/method.md
+@@ -0,0 +1,61 @@
++### **Method 1: Using VSCode Tasks + Keyboard Shortcut**
++1. **Create a Task in VSCode**:
++   - Open the Command Palette (`Ctrl+Shift+P` or `Cmd+Shift+P` on macOS).
++   - Type `Tasks: Configure Task` and select it.
++   - Choose `Create tasks.json file from template` â†’ `Others`.
++   - Replace the content with:
++     ```json
++     {
++       "version": "2.0.0",
++       "tasks": [
++         {
++           "label": "Run Batch File",
++           "type": "shell",
++           "command": "${workspaceFolder}/yourfile.bat", // Update path to your .bat file
++           "problemMatcher": []
++         }
++       ]
++     }
++     ```
++   - Save the file (`tasks.json`).
++
++2. **Assign a Keyboard Shortcut**:
++   - Open the Command Palette again (`Ctrl+Shift+P`).
++   - Type `Preferences: Open Keyboard Shortcuts (JSON)`.
++   - Add this entry:
++     ```json
++     {
++       "key": "ctrl+alt+b", // Choose your preferred hotkey
++       "command": "workbench.action.tasks.runTask",
++       "args": "Run Batch File"
++     }
++     ```
++   - Save the file.
++
++Now, pressing `Ctrl+Alt+B` (or your chosen hotkey) will execute the `.bat` file.
++
++---
++
++### **Method 2: Using a VSCode Extension (Advanced)**
++If you need more control (like running in a terminal), you can use the **Terminal Commands** extension:
++1. Install the [Terminal Commands](https://marketplace.visualstudio.com/items?itemName=usernamehw.terminal-commands) extension.
++2. Configure a command in `settings.json`:
++   ```json
++   "terminalCommands.commands": {
++     "Run Batch File": "yourfile.bat"
++   }
++   ```
++3. Assign a hotkey in `keybindings.json`:
++   ```json
++   {
++     "key": "ctrl+alt+b",
++     "command": "terminalCommands.runCommand",
++     "args": "Run Batch File"
++   }
++   ```
++
++---
++
++### **Notes**
++- Ensure the `.bat` file is in your workspace or provide the full path (`C:/path/to/yourfile.bat`).
++- If the script requires admin rights, you may need additional setup (like running VSCode as admin).
